查找当前薪水(to_date='9999-01-01')排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，
你可以不使用order by完成吗

CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));

CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));

//关键是找出第二大的薪水

// 法1: 两次max配合, 不适合用于第N大

SELECT e.emp_no, s.salary, e.last_name, e.first_name
FROM employees e INNER JOIN salaries s
ON e.emp_no=s.emp_no
WHERE s.to_date='9999-01-01'
AND s.salary =
        (SELECT max(salary) FROM salaries
         WHERE to_date='9999-01-01'
         AND salary <
                 (SELECT max(salary) FROM salaries
                  WHERE to_date='9999-01-01')
         );

// 法2: <=号配合COUNT函数, 适合用于第N大

SELECT e.emp_no, s.salary, e.last_name, e.first_name
FROM employees e INNER JOIN salaries s
ON e.emp_no=s.emp_no
AND to_date='9999-01-01'
AND salary=
    (
        select s1.salary
        from salaries s1
                 join salaries s2 -- 自连接查询
                      on s1.salary <= s2.salary         -- 多个小于s2的s1对应一个s2
                          and s1.to_date = '9999-01-01'
                          and s2.to_date = '9999-01-01'
        group by s1.salary                              -- 以s1.salary分组后 一个s1反过来对应多个>=它的s2
        having count(distinct s2.salary) = 2            -- (s2去重之后的数量就是对应的名次)
    );
